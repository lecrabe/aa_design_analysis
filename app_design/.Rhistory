shiny::runApp()
runApp()
print(source('app_bckup.R')$value)
runApp()
print(source('app_remi.R')$value)
print(source('app_bckup.R')$value)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?set.seed
set.seed(i)
i=1
set.seed(i)
(set.seed(i))
runApp()
?selectInput
runApp()
getData("alt",path='www/')
?getData
runApp()
runApp()
runApp()
runApp()
runApp()
?req
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_YF_20160916/design')
runApp()
packages <- function(x){
x <- as.character(match.call()[[2]])
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x,repos="http://cran.r-project.org")
require(x,character.only=TRUE)
}
}
packages(ggplot2)
packages(xtable)
packages(raster)
packages(shiny)
packages(shinydashboard)
packages(dismo)
packages(stringr)
packages(snow)
packages(plyr)
packages(leaflet)
packages(RColorBrewer)
packages(DT)
packages(rgeos)
packages(rgdal)
packages(shinyBS)
packages(htmltools)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
stats <- as.data.frame(read.table("../output/stats.txt"))
names(stats) <- c('map_value', 'map_area')
stats$map_class <- stats$map_value
stats<-arrange(stats,map_value)
write.csv(stats[1:3],"../output/area_rast.csv",row.names=F)
stats[1:3]
write.csv(,stats[1:3],"../output/area_rast.csv",row.names=F)
write.csv(stats[,1:3],"../output/area_rast.csv",row.names=F)
stats[,1:3]
stats[,1:3]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
req(input$rasterarea)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
shiny::runApp()
runApp()
runApp()
runApp()
packages <- function(x){
x <- as.character(match.call()[[2]])
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x,repos="http://cran.r-project.org")
require(x,character.only=TRUE)
}
}
packages(ggplot2)
packages <- function(x){
x <- as.character(match.call()[[2]])
if (!require(x,character.only=TRUE)){
install.packages(pkgs=x,repos="http://cran.r-project.org")
require(x,character.only=TRUE)
}
}
packages(ggplot2)
packages(ggplot2)
packages(ggplot2)
packages(Rcpp)
library(Rcpp)
install.packages("Rcpp")
packages(ggplot2)
.libPaths()
install.packages("Rcpp")
pts <- read.csv("../output/response.csv")
legend <- levels(as.factor(pts$class))
tmp              <- as.data.frame(pts$ID)
tmp$location_srs <- "EPSG:4326"
tmp$location_x   <- pts$XCOORD
tmp$location_y   <- pts$YCOORD
tmp$operator     <- "autobot"
tmp$elevation    <- pts$ELEVATION
tmp$slope        <- pts$SLOPE
tmp$aspect       <- pts$ASPECT
tmp$adm1_name    <- pts$ADM1_NAME
tmp$country      <- pts$COUNTRY
tmp$saved        <- "FALSE"
tmp$year         <- "2016"
tmp$month        <- "04"
tmp$day          <- "01"
tmp$plot         <- "response.csv"
tmp$cover        <- pts$class
tmp$confidence   <- "FALSE"
tmp$map_code     <- pts$class
table(tmp$cover,tmp$map_code)
tmp$rand_th      <- runif(nrow(tmp),0,1)
shiny::runApp()
Sys.Date()
runApp()
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
areas_i <- read.csv(paste('../output/area_shp.csv',sep=""))
df_i <- read.csv('../input/collectedData_mockup_results.csv2016-09-17')
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
write.csv(df,paste("../input/collectedData_mockup_results_",Sys.Date(),",csv",sep=""),row.names=F)
df <- tmp[,1:18]
names(df)<-c("id","location_srs","location_x","location_y","operator",
"elevation","slope","aspect","adm1_name","country",
"actively_saved","actively_saved_on_year","actively_saved_on_month","actively_saved_on_day",
"plot_file","cover","confidence","map_code")
table(df$cover,df$map_code)
tmp$rand_th      <- runif(nrow(tmp),0,1)
## Create a legend column with random values
tmp$rand_leg     <- sample(legend,nrow(tmp),replace=T)
## Replace the cover column with random values where random index is inferior to threshold
tmp[tmp$rand_th < 0.15,]$cover <- tmp[tmp$rand_th < 0.15,]$rand_leg
## Reset the random number
tmp$rand_th      <- runif(nrow(tmp),0,1)
## Replace the confidence column with TRUE random index is inferior to threshold
tmp[tmp$rand_th < 0.90,]$confidence <- "TRUE"
df <- tmp[,1:18]
names(df)<-c("id","location_srs","location_x","location_y","operator",
"elevation","slope","aspect","adm1_name","country",
"actively_saved","actively_saved_on_year","actively_saved_on_month","actively_saved_on_day",
"plot_file","cover","confidence","map_code")
table(df$cover,df$map_code)
write.csv(df,paste("../input/collectedData_mockup_results_",Sys.Date(),",csv",sep=""),row.names=F)
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
df_i <- read.csv('../input/collectedData_mockup_results_2016-09-17.csv')
df_i_map <- as.data.frame(df_i)
#map_code <- "map_code"
map_code <- "map_code"
legend_i <- levels(as.factor(df_i_map[,map_code]))
runApp()
runApp()
strsplit(Sys.Date(),"-")
tmp$year         <- "2016" strsplit("-",Sys.Date())
strsplit("-",Sys.Date())
Sys.Date()
strsplit(x = Sys.Date(),split = "-" )
strsplit(x = Sys.Date(),split = - )
strsplit(x = Sys.Date(), split = "2" )
strsplit(x = as.character(Sys.Date()), split = "2" )
strsplit(x = as.character(Sys.Date()), split = "-" )
strsplit(x = as.character(Sys.Date()), split = "-" )[1]
strsplit(x = as.character(Sys.Date()), split = "-" )[[1]]
strsplit(x = as.character(Sys.Date()), split = "-" )[1][[1]]
list(strsplit(x = as.character(Sys.Date()), split = "-" ))[1]
list(strsplit(x = as.character(Sys.Date()), split = "-" ))
strsplit(x = as.character(Sys.Date()), split = "-" )
strsplit(x = as.character(Sys.Date()), split = "-" )[[1]][2]
tmp$year         <- strsplit(x = as.character(Sys.Date()), split = "-" )[[1]][1]
tmp$month        <- strsplit(x = as.character(Sys.Date()), split = "-" )[[1]][2]
tmp$day          <- strsplit(x = as.character(Sys.Date()), split = "-" )[[1]][3]
runApp()
runApp()
runApp()
runApp()
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160917/.app_analysis')
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp('~/R/my_shiny_apps/accuracy_assessment/AA_design_analysis_20160928/.app_analysis')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
